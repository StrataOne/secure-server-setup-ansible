{
	order rate_limit before basicauth
	# to see logs - tail -100f /var/log/caddy/access.log | while read -r line; do echo -e "$line"; done
	log http.log.access {
			include http.log.access
			output file /var/log/caddy/access.log
			format formatted "\e[35m[{ts}]\e[0m \e[96m\e[1m{request>remote_ip}\e[0m \e[31m{request>headers>X-Forwarded-For}\e[0m \e[33m{request>method}\e[0m \e[92m{request>host}\e[32m{request>uri}\e[0m \e[97m{status}\e[0m   \e[90m{request>headers>User-Agent}\e[0m \e[34m{request>headers>Referer}\e[0m" {
					time_format "02/Jan/2006:15:04:05-0700"
			}
	}
	log {
			exclude http.log.access
			output file /var/log/caddy/caddy.log
			format json
	}
}

(rpc-header) {
	header {
		Access-Control-Allow-Methods "POST, GET, OPTIONS"
		Access-Control-Allow-Headers "*"
		Access-Control-Allow-Origin "*"
		Access-Control-Max-Age 86400
		Cache-Control no-cache
		Pragma no-cache
		-Server
	}
}

(api-header) {
	header {
		Access-Control-Allow-Origin "*"
	}
}

(rate-limiter) {
# checks for list of allowed IPs
	@ipfilter {
{% for allowed in white_list %}
	{% if allowed is iterable and (allowed is not string and allowed is not mapping) %}
		{% for allowed_ip in allowed %}
	not header X-FORWARDED-FOR {{ allowed_ip }}
		{% endfor %}
	{% else  %}
	not header X-FORWARDED-FOR {{ allowed }}
	{% endif  %}
{% endfor %}
	}
	handle @ipfilter {
		rate_limit {header.X-FORWARDED-FOR} 250r/m
		rate_limit {path} 20r/s
	}
}

(blocked) {
# checks for blocks IPs and re-directs them to 403
	@blocked {
{% for blocked in blocked_list %}
		header X-FORWARDED-FOR {{ blocked }}
{% endfor %}
	}
	respond @blocked "<h1>Access Denied</h1>" 403
}

handle_errors {
	respond "{err.status_code} {err.status_text}"
}

:80 {
	root * /usr/share/caddy
	file_server
}

import /etc/caddy/*.caddy
